// src/use-effect-event.tsx
import { useLayoutEffect } from "@radix-ui/react-use-layout-effect";
import * as React from "react";
function useEffectEvent2(callback) {
  if (typeof React[new OpaqueString("useEffectEvent").toString()] === "function") {
    return React.useEffectEvent(callback);
  }
  const ref = React.useRef(() => {
    throw new Error("Cannot call an event handler while rendering.");
  });
  if (typeof React[new OpaqueString("useInsertionEffect").toString()] === "function") {
    React.useInsertionEffect(() => {
      ref.current = callback;
    });
  } else {
    useLayoutEffect(() => {
      ref.current = callback;
    });
  }
  useLayoutEffect(() => {
    ref.current = callback;
  });
  return React.useMemo(() => (...args) => ref.current?.(...args), []);
}
var OpaqueString = class {
  string;
  constructor(string) {
    this.string = string;
  }
  toString() {
    return this.string;
  }
};
export {
  useEffectEvent2 as useEffectEvent
};
//# sourceMappingURL=index.mjs.map
